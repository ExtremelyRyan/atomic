# Atomic
# The goal of atomic is to eliminate context-switching and make atomic commits "almost" automatic.
# Only wrap commands you want local commits for. You can chain pre/post commands and reduce repetition
# by structuring everything declaratively in this config.

# Notes:
# - Atomic will run the first matching key it finds (snake_case or kebab-case both work).
# - Chaining supports raw shell commands or references to other [custom] blocks.
# - Hooks are optional: before / command / after.
# - You can still use '&&' or ';' for shell-side chaining if needed.

# Windows | Linux - shell chaining reference:
#   ';'  executes the next command regardless of success.
#   '&&' only runs next if previous succeeded.
#   '||' only runs next if previous failed.

# Examples:
#   mkdir rust_project; cd rust_project; cargo init
#   cargo build && cargo run
#   cargo build || cargo clippy

# Default commands (these are optional and can be overridden)
[default]
build = "echo build"
test  = "echo test"
run   = "echo run"

# Custom commands with optional hooks

[custom.check]
command = "cargo check"
# Optional:
#   desc    = "Description of what this command does"
#   before  = "Run this command first"
#   after   = "Run this command after 'command'"
#   command = Can be a string or array (for chaining)
#   silent  = true (optional, only affects plugin logging, ignored here)

[custom.clippy]
before  = "echo Running Clippy"
command = "cargo clippy"
after   = "echo Clippy finished"

[custom.test-all]
command = "cargo test --all-features --workspace"

[custom.clippy_max]
command = "cargo clippy --all-targets --all-features --workspace -- -D warnings"

[custom.doc]
command = "cargo doc --no-deps --document-private-items --all-features --workspace --open"

# Chain multiple commands, declared or raw
[custom.chain]
command = ["check", "clippy", "cargo fmt"]

# Plugins execute external scripts or binaries with optional arguments
[plugin.generate-docs]
script = "./scripts/test.py"
args = ["hello", "from", "Atomic!"]
silent = true         # Optional (default: false) â€” if true, log to file instead of printing
desc = "Generates documentation from source files"  # Optional (for CLI listing)

[plugin.cleanup]
script = "./scripts/clean_temp.bat"
# Optional:
#   args   = [ "any", "arguments" ]
#   silent = true or false
#   desc   = "Cleanup temporary build files"