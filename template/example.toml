# Atomic
# The goal of Atomic is to eliminate workflow disruption by automating atomic commits.
# Wrap only the commands where you want automatic Git snapshots to happen.
# A side benefit: you can create chainable workflows with before/after steps,
# reducing repetition and keeping your flow tight.

# Windows | Linux - shell chaining reference:
#   ';'  runs the next command regardless of success
#   '&&' runs the next only if the previous succeeded
#   '||' runs the next only if the previous failed

# Examples:
#   mkdir rust_project; cd rust_project; cargo init
#   cargo build && cargo run
#   cargo build || cargo clippy

# Notes:
# - Atomic will resolve the first matching key (snake_case or kebab-case).
# - You can define a command as a string or as a table with hooks.
# - Chains can include custom command names or raw shell commands.

# Default commands (optional overrides for `build`, `test`, and `run`)
[default]
build = ""
test  = ""
run   = ""

# Custom commands go here
# You can use raw shell strings or full hook tables

[custom.hello]
before  = "echo Starting hello"
command = "echo Hello from Atomic"
after   = "echo Hello done"

[custom.world]
command = "echo World"

# A chain of commands, which can be declared commands or raw shell strings
[custom.chain]
command = ["hello", "world", "echo 'From the other side'"]